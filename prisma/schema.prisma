// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  displayName     String
  passwordHash    String?
  salt            String?
  isAdmin         Boolean          @default(false)
  isPro           Boolean          @default(false)
  bio             String?
  image           String?
  stations        Station[]        @relation("creator")
  videoStations   VideoStation[]
  comments        Comment[]
  messages        Message[]
  following       Station[]        @relation("station-followers")
  adClip          String           @default("default-ad.mp4")
  sessions        Session[]
  credentialsUser CredentialsUser?
  googleUser      GoogleUser?
}

model CredentialsUser {
  userId   String @unique @id @default(cuid())
  password String // Hashed

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GoogleUser {
  userId   String @unique @id @default(cuid())
  googleId String @unique

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Station {
  id            String         @id @default(cuid())
  name          String
  thumbnail     String
  description   String
  userId        String
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, name: "creator")
  isPublic      Boolean        @default(false)
  isRandomized  Boolean        @default(false)
  tags          Tag[]
  scheduleItems ScheduleItem[]
  videoStations VideoStation[]
  comments      Comment[]
  followers     User[]         @relation("station-followers")
  adClip        String?        @default("default-ad.mp4")
}

model Video {
  id             String         @id @default(cuid())
  title          String
  thumbnail      String
  duration       Int
  category       String
  youtubeChannel String
  videoStations  VideoStation[]
  scheduleItems  ScheduleItem[]
}

model VideoStation {
  videoId   String
  stationId String
  userId    String
  video     Video   @relation(fields: [videoId], references: [id])
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([videoId, stationId, userId])
}

model ScheduleItem {
  id         String   @id @default(cuid())
  stationId  String
  videoId    String
  startTime  DateTime
  endTime    DateTime
  repeatDays Int      @default(0) // Bitmap for days of week
  station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  video      Video    @relation(fields: [videoId], references: [id])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  stations Station[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  stationId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  stationId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id         String @id
  url        String @unique
  deleteHash String @unique
  createdAt  Int
}
