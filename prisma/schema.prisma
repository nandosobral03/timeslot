// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}


datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  displayName     String
  passwordHash    String?
  salt            String?
  bio             String?
  image           String?
  stations        Station[]        @relation("creator")
  videoStations   VideoStation[]
  following       Station[]        @relation("station-followers")
  sessions        Session[]
  credentialsUser CredentialsUser?
  googleUser      GoogleUser?

  chatMessages ChatMessage[]
  extensionAPIKey String? @unique

  @@index([email])
}

model CredentialsUser {
  userId   String @id @unique @default(cuid())
  password String // Hashed

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GoogleUser {
  userId   String @id @unique @default(cuid())
  googleId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Station {
  id            String         @id @default(cuid())
  name          String
  thumbnail     String
  description   String
  userId        String
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, name: "creator")
  isPublic      Boolean        @default(false)
  tags          Tag[]
  scheduleItems ScheduleItem[]
  videos        VideoStation[]
  chatMessages  ChatMessage[]

  followers     User[]         @relation("station-followers")
  followersCount Int           @default(0)

  @@index([userId])
  @@index([isPublic])
  @@index([name])
}

model Video {
  id             String         @id @default(cuid())
  title          String
  thumbnail      String
  duration       Int
  category       String?
  youtubeChannel String
  youtubeChannelId String
  stations       VideoStation[]
  scheduleItems  ScheduleItem[]
}

model VideoStation {
  videoId   String
  stationId String
  userId    String
  video     Video   @relation(fields: [videoId], references: [id])
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([videoId, stationId, userId])
  @@unique([videoId, stationId])
  @@index([videoId])
  @@index([stationId])
  @@index([userId])
}

model ScheduleItem {
  id        String   @id @default(cuid())
  stationId String
  videoId   String?
  dayOfWeek Int
  startTime DateTime
  station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  video     Video?   @relation(fields: [videoId], references: [id])
  duration  Int

  @@index([stationId])
  @@index([videoId])
  @@index([dayOfWeek, startTime])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  stations Station[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  userId    String
  stationId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
}
